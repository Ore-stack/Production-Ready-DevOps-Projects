name: Deploy to AWS ECS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
  CONTAINER_NAME: 'webapp'
  CONTAINER_PORT: '3001'
  PROJECT_DIR: 'Project 2 - CI-CD Pipeline'
  TRIVY_SEVERITY: 'CRITICAL,HIGH'
  TRIVY_EXIT_CODE: '1'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  test:
    name: üß™ Test Application
    runs-on: ubuntu-latest
    timeout-minutes: 10

    defaults:
      run:
        working-directory: ${{ env.PROJECT_DIR }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ env.PROJECT_DIR }}/package-lock.json'

      - name: üì¶ Install dependencies
        run: npm ci --audit false

      - name: üîç Run linting
        run: npm run lint --if-present || echo "Linting not configured"

      - name: ‚úÖ Run tests
        run: npm test -- --passWithNoTests
        env:
          NODE_ENV: test

      - name: üê≥ Test Docker build
        run: |
          docker build -t test-build --load .
          echo "‚úÖ Docker build successful!"

  security-scan:
    name: üîí Security Scanning
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Build Docker image
        run: |
          docker build -t my-webapp:latest .

      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'my-webapp:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ env.TRIVY_SEVERITY }}
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: üìä Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.sarif
          retention-days: 7

      - name: ‚ùå Fail job if CRITICAL/HIGH vulnerabilities found
        run: |
          if grep -q '"severity":"CRITICAL"' trivy-results.sarif || grep -q '"severity":"HIGH"' trivy-results.sarif; then
            echo "‚ùå Critical or High vulnerabilities detected!"
            exit 1
          else
            echo "‚úÖ No Critical/High vulnerabilities found."
          fi

  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: >-
      github.ref == 'refs/heads/main' && 
      needs.test.result == 'success' &&
      needs.security-scan.result == 'success' &&
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production
    timeout-minutes: 20

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üê≥ Build Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --label "org.opencontainers.image.revision=${{ github.sha }}" \
            --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: üì§ Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: üöÄ Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  cleanup:
    name: üßπ Cleanup (on failure)
    runs-on: ubuntu-latest
    if: >-
      always() && 
      (needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.deploy.result == 'failure')
    needs: [test, security-scan, deploy]

    steps:
      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üóëÔ∏è Clean up ECR images
        run: |
          echo "Cleaning up images..."
          aws ecr batch-delete-image \
            --repository-name $ECR_REPOSITORY \
            --image-ids imageTag=${{ github.sha }} \
            --region $AWS_REGION || echo "No images to clean up."

  notifications:
    name: üìß Send Email Notifications
    runs-on: ubuntu-latest
    needs: [test, security-scan, deploy, cleanup]
    if: always()

    steps:
      - name: üìß Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: |
            GitHub Actions: ${{ github.workflow }} - ${{ job.status }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
          body: |
            This is an automated message from GitHub Actions.
          html_body: |
            <!DOCTYPE html>
            <html>
            <head>
              <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                .header { background: linear-gradient(135deg, #6e8efb, #a777e3); color: white; padding: 20px; text-align: center; border-radius: 5px 5px 0 0; }
                .content { background: #f9f9f9; padding: 20px; border-radius: 0 0 5px 5px; }
                .status-success { color: #28a745; font-weight: bold; }
                .status-failure { color: #dc3545; font-weight: bold; }
                .status-skipped { color: #6c757d; font-weight: bold; }
                .job-table { width: 100%; border-collapse: collapse; margin: 15px 0; }
                .job-table th, .job-table td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
                .button { display: inline-block; padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }
                .security-warning { background: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 15px 0; }
              </style>
            </head>
            <body>
              <div class="container">
                <div class="header">
                  <h1>GitHub Actions Workflow Notification</h1>
                  <h2>${{ github.workflow }} - <span class="${{ job.status == 'success' && 'status-success' || 'status-failure' }}">${{ job.status }}</span></h2>
                </div>
                <div class="content">
                  <p><strong>Repository:</strong> ${{ github.repository }}</p>
                  <p><strong>Triggered by:</strong> ${{ github.actor }}</p>
                  <p><strong>Commit:</strong> <code>${{ github.sha }}</code></p>
                  
                  <h3>Job Results:</h3>
                  <table class="job-table">
                    <tr>
                      <th>Job</th>
                      <th>Status</th>
                    </tr>
                    <tr>
                      <td>üß™ Test Application</td>
                      <td class="${{ needs.test.result == 'success' && 'status-success' || needs.test.result == 'failure' && 'status-failure' || 'status-skipped' }}">${{ needs.test.result || 'skipped' }}</td>
                    </tr>
                    <tr>
                      <td>üîí Security Scanning</td>
                      <td class="${{ needs.security-scan.result =='success' && 'status-success' || needs.security-scan.result == 'failure' && 'status-failure' || 'status-skipped' }}">${{ needs.security-scan.result || 'skipped' }}</td>
                    </tr>
                    <tr>
                      <td>üöÄ Deploy to Production</td>
                      <td class="${{ needs.deploy.result == 'success' && 'status-success' || needs.deploy.result == 'failure' && 'status-failure' || 'status-skipped' }}">${{ needs.deploy.result || 'skipped' }}</td>
                    </tr>
                    <tr>
                      <td>üßπ Cleanup</td>
                      <td class="${{ needs.cleanup.result == 'success' && 'status-success' || needs.cleanup.result == 'failure' && 'status-failure' || 'status-skipped' }}">${{ needs.cleanup.result || 'skipped' }}</td>
                    </tr>
                  </table>
                  
                  <div style="text-align: center; margin: 20px 0;">
                    <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" class="button">
                      View Workflow Details
                    </a>
                  </div>
                  
                  <hr>
                  <p style="font-size: 12px; color: #666; text-align: center;">
                    This is an automated message from GitHub Actions. Please do not reply to this email.
                  </p>
                </div>
              </div>
            </body>
            </html>
