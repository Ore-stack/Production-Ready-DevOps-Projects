---
# Kubernetes Deployment for the webapp with security best practices,
# resource limits, probes, and Istio sidecar injection.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-webapp
  namespace: webapp-prod
  labels:
    app: my-webapp
spec:
  replicas: 2  # avoid overcommitment on small clusters
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: my-webapp
  template:
    metadata:
      labels:
        app: my-webapp
      annotations:
        sidecar.istio.io/inject: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
    spec:
      serviceAccountName: ci-cd-deployer
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - my-webapp
              topologyKey: kubernetes.io/hostname
      containers:
        - name: webapp
          image: myrepo/my-webapp:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3001
          env:
            - name: ENVIRONMENT
              value: kubernetes
            - name: NODE_ENV
              value: production
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
      initContainers:
        - name: init-perms
          image: busybox:1.36
          command: ["sh", "-c", "chown -R 1000:2000 /app || true"]
          securityContext:
            runAsUser: 0
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: app-data
              mountPath: /app
      volumes:
        - name: app-data
          emptyDir: {}

---
# Service to expose the webapp deployment
apiVersion: v1
kind: Service
metadata:
  name: my-webapp-service
  namespace: webapp-prod
  labels:
    app: my-webapp
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 3001
      protocol: TCP
  selector:
    app: my-webapp

---
# NetworkPolicy to restrict traffic to/from the webapp pods
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-from-alb-and-monitoring
  namespace: webapp-prod
spec:
  podSelector:
    matchLabels:
      app: my-webapp
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              app.kubernetes.io/name: aws-load-balancer-controller
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: monitoring
        - podSelector: {}
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: monitoring
      ports:
        - protocol: TCP
          port: 9100

---
# PodDisruptionBudget to ensure minimum availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-webapp-pdb
  namespace: webapp-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: my-webapp
# Note: Adjust replicas, resource limits, and other settings based on
# your cluster capacity and application needs.
